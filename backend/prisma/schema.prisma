// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" // 生成 Prisma Client
}

datasource db {
  provider = "mysql" // 数据库类型为 MySQL
  url      = env("DATABASE_URL") // 数据库连接字符串
}

model user {
  id        Int      @id @default(autoincrement()) // 用户唯一标识符，自动递增
  userName  String   @unique // 用户名，唯一
  password  String // 密码
  nickName  String   @default("") // 昵称，默认为空字符串
  address   String // 地址
  email     String   @default("") // 邮箱，默认为空字符串
  createdAt DateTime @default(now()) // 创建时间，默认为当前时间
  updatedAt DateTime @updatedAt @map("update_at") // 更新时间

  // 关联字段
  posts post[] // 一个用户可以有多个帖子

  @@map("users") // 数据库表名
}

model post {
  id        String   @id @unique @default(uuid()) // 帖子唯一标识符，使用 UUID
  title     String   @default("") // 帖子标题，默认为空字符串
  desc      String   @default("") // 帖子描述，默认为空字符串
  content   String   @default("") // 帖子内容，默认为空字符串
  createdAt DateTime @default(now()) // 创建时间，默认为当前时间
  updatedAt DateTime @updatedAt @map("update_at") // 更新时间

  // 关联字段
  userId Int // 用于存储用户 ID
  user   user @relation(fields: [userId], references: [id]) // 关联到用户

  @@map("posts") // 数据库表名
}

// 用户任务用户表
model TaskUser {
  id            Int      @id @default(autoincrement()) // 用户唯一标识符
  userName      String   @unique // 用户名，唯一
  password      String
  email         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tasks         Task[]   @relation("Creator") // 发布的任务
  assignedTasks Task[]   @relation("Assignee") // 接单的任务
}

// 任务表
model Task {
  id          Int        @id @default(autoincrement()) // 任务唯一标识符
  title       String // 任务标题
  description String // 任务描述
  status      TaskStatus @default(PENDING) // 任务状态，默认待处理
  createdAt   DateTime   @default(now()) // 任务发布时间
  updatedAt   DateTime   @updatedAt
  views       Int        @default(0) // 浏览量
  creatorId   Int // 发布任务的用户ID
  creator     TaskUser   @relation("Creator", fields: [creatorId], references: [id]) // 发布者
  assigneeId  Int? // 接单的用户ID（可为空）
  assignee    TaskUser?  @relation("Assignee", fields: [assigneeId], references: [id]) // 接单者
}

// 任务状态枚举
enum TaskStatus {
  PENDING // 待处理
  IN_PROGRESS // 进行中
  COMPLETED // 已完成
  CANCELLED // 已取消
}
